# This file is used to configure your project.
# Read more about the various options under:
# http://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files

[metadata]
name = open_nipals
description = A package to support dimensionality reduction methods.
author = 'Niels Schlusser'
author_email = nschluss@its.jnj.com
license = JnJ Proprietary
long_description = file: README.md
long_description_content_type = text/markdown; charset=UTF-8
url = https://github.com/pyscaffold/pyscaffold/
# Add here related links, for example:
project_urls =
    Documentation = https://pyscaffold.org/
#    Source = https://github.com/pyscaffold/pyscaffold/
#    Changelog = https://pyscaffold.org/en/latest/changelog.html
#    Tracker = https://github.com/pyscaffold/pyscaffold/issues
#    Conda-Forge = https://anaconda.org/conda-forge/pyscaffold
#    Download = https://pypi.org/project/PyScaffold/#files
#    Twitter = https://twitter.com/PyScaffold

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any

# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers =
    Development Status :: 4 - Beta
    Programming Language :: Python


[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src

# Require a min/specific Python version (comma-separated conditions)
python_requires = >=3.9,<3.14

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
install_requires =
    numpy >=1.21, <2.3
    pandas >=2.0, <2.3
    scipy >=1.5, <1.15
    scikit-learn >=1.2, <1.7

# scipy >= 1.14 conflicts with python 3.9, so for recent scipy use python >= 3.10 
# pandas <= 2.2 conflicts with numpy >= 1.26.4

[options.packages.find]
where = src
exclude =
    tests
    .tox
    docs
    dist
    data
    build

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install open_nipals[PDF]` like:
# PDF = ReportLab; RXP

# Add here test requirements (semicolon/line-separated)
testing =
    setuptools
    pytest
    pytest-cov
    parameterized
    openpyxl
    ruff
    tox
    tox-conda

[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = open_nipals.module:function
# For example:
# console_scripts =
#     fibonacci = open_nipals.skeleton:run
# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this py.test issue.
addopts =
    # --cov open_nipals --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[bdist_wheel]
# Use this option if your package is pure-python
universal = 1

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no-vcs = 1
formats = bdist_wheel

[tool.ruff.lint]
select = ["ALL"]

[tool.ruff]
line-length=79

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.0
package = open_nipals
extensions =
    no_skeleton
